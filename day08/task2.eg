# Advent of Code (AoC) - day 8, task 2

import "prelude.eg"
import "os.ego"
import "generator.eg"
import "dictionary.eg"

using System
using OS
using List

def input = let L = read_line stdin in if eof stdin then {} else {L | input}

def to_board =
   do Gen::from_lists |> Gen::zip_2d Gen::space |> Gen::to_lists |> flatten |> Dict::from_list

def view =
    [ T {} -> {} | T {T1|TT} -> if T1 < T then {T1|view T TT} else {T} ]

def distance =
    [ B P PP -> length (view (Dict::get B P) (map (Dict::get B) PP)) ]

def pair =
    [ X:int YY -> map [Y -> (X,Y)] YY | XX Y:int -> map [X -> (X,Y)] XX ]

def score =
    [B (MAXX,MAXY) (X,Y) ->
         (distance B (X,Y) (pair (reverse (from_to 0 (X - 1))) Y)) *
         (distance B (X,Y) (pair (from_to (X + 1) MAXX) Y)) *
         (distance B (X,Y) (pair X (reverse (from_to 0 (Y - 1))))) *
         (distance B (X,Y) (pair X (from_to (Y + 1) MAXY)))
     ]

def scores =
    [ B -> let MM = maximum (Dict::keys B) in 
           foldl [Z P -> {score B MM P|Z}] {} (Dict::keys B) ]

def main =
    input |> map (map to_int . unpack) |> to_board |> scores |> maximum
