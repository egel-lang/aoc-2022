# Advent of Code (AoC) - day 13, task 2

import "prelude.eg"
import "os.ego"
import "regex.ego"
import "search.eg"
using System
using OS
using List
using Search

def input = let L = read_line stdin in if eof stdin then nil else cons L input

val digit = Regex::compile "[0-9]"

def look     = [ {} -> fail {} | {B|BB} -> success B BB ]
def is_char  = [ C0 -> look <*> \C1 -> if C0 == C1 then success C0 else fail ]
def is_digit = look <*> \C -> if Regex::match digit (pack {C}) then success C else fail

def parse_num   = plus is_digit <@> \L -> L |> pack |> to_int
def parse_lists = star (parse_list </> \L -> is_char ',' <@> \_ -> L)
def parse_list  = parse_num <+> (is_char '[' <*> \_ -> parse_lists <*> \LL -> is_char ']' <@> \_ -> LL)

def parse_line = [ L -> (search (parse_list) (unpack L) [X CC -> X] [X CC -> throw X] [X CC -> throw X]) ]

def compare =
    [ X:int Y:int -> if X < Y then -1 else if Y < X then 1 else 0
    | X:int YY -> compare {X} YY | XX Y:int -> compare XX {Y}
    | {} {}  -> 0 | {} _   -> -1 | _  {} -> 1
    | {X|XX} {Y|YY} -> 
        let C = compare X Y in if C < 0 then C else if 0 < C then C
        else compare XX YY ]

val div0 = parse_line "[[2]]"
val div1 = parse_line "[[6]]"
    
def main = 
    input |> filter [L -> L /= ""] 
        |> map parse_line
        |> ((++) {div0, div1}) 
        |> sort_by [X Y -> compare X Y < 0]
        |> [XX -> zip (from_to 1 (length XX)) XX]
        |> filter [(N, L) -> (compare L div0 == 0) || \_ -> (compare L div1 == 0)]
        |> map fst |> product

