# Advent of Code (AoC) - day 18, task 2

import "prelude.eg"
import "os.ego"
import "generator.eg"
import "dictionary.eg"
import "regex.ego"

using System
using OS
using List

def input = let L = read_line stdin in if eof stdin then {} else {L | input}

def digits = Regex::compile "[0-9]+"

def parse_line = do Regex::matches digits |> map to_int |> [ {X,Y,Z} -> (X,Y,Z) ]

def offsets = {(-1,0,0),(1,0,0),(0,-1,0),(0,1,0),(0,0,-1),(0,0,1)}

def add3d = [(X0,Y0,Z0) (X1,Y1,Z1) -> (X0+X1,Y0+Y1,Z0+Z1)]

def box =
    let F = [N -> (-1 <= N) && [_ -> N <= 25]] in
    do filter [(N,_,_) -> F N] |> filter [(_,N,_) -> F N] |> filter [(_,_,N) -> F N] 

def neighbors = [ P -> map (add3d P) offsets |> box ]

def set3d = foldr [P D -> Dict::set D P true] Dict::dict

def count = 
    do [ D -> 
        while [(N,{},V)    -> none
              |(N,{P|PP},V) ->
                if Dict::has V P then (N,PP,V) else
                if Dict::has D P then (N+1,PP,V) else
                (N, neighbors P ++ PP, Dict::set V P true) ]
        (0, {(0,0,0)},Dict::dict) ] |> [(N,_,_) -> N]

def main =
    input |> map parse_line |> set3d |> count
