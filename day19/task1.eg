# Advent of Code (AoC) - day 19, task 1

# this took 5 hours

import "prelude.eg"
import "os.ego"
import "generator.eg"
import "dictionary.eg"
import "regex.ego"

using System
using OS
using List

def input = let L = read_line stdin in if eof stdin then {} else {L | input}
def digits = Regex::compile "[0-9]+"
def parse_line = do Regex::matches digits |> map to_int 
    |> [{N,A,B,C,D,E,F} -> (N,{
        ((1,0,0,0),(-A,0,0,0)),
        ((0,1,0,0),(-B,0,0,0)),
        ((0,0,1,0),(-C,-D,0,0)),
        ((0,0,0,1),(-E,0,-F,0))})]

def add4d = [(X0,Y0,Z0,N0) (X1,Y1,Z1,N1) -> (X0+X1,Y0+Y1,Z0+Z1,N0+N1)]
def mul4d = [S (X,Y,Z,N) -> (X*S, Y*S, Z*S, N*S)]
def pos4d = [(X,Y,Z,N) -> (0 <= X) && [_ -> (0 <= Y) && [_ -> (0 <= Z) && [_ -> (0 <= N)]]]]

def time = 24

val beat = Dict::dict
def beat_get = [ T -> Dict::get beat T ]
def beat_set = [ T N -> Dict::set beat T (max N (beat_get T)) ]
def beat_reset = map [T -> Dict::set beat T 0] (from_to 0 time); none

def geode = [(_,_,_,G) -> G]

def advance =
    [ T BB (R0,S0) (R1,S1) ->
        if beat_get T <= geode S0 then
            beat_set T (geode S0);
            if time <= T then 0
            else let S2 = add4d S0 S1 in
                if pos4d S2 then search (T+1) BB (add4d R0 R1, add4d R0 S2)
                else advance (T+1) BB (R0, add4d R0 S0) (R1,S1)
         else 0 ]

def search =
    [ T BB (R0,S0) ->
        { mul4d (time - T) R0 |> add4d S0 |> geode | 
          foldr [(R1,S1) AA -> {advance T BB (R0,S0) (R1,S1)|AA}] {} BB } |> maximum ]
          
def solve =
    do map [(N,BB) -> print "processing: " N "\n"; beat_reset ; N * (search 0 BB ((1,0,0,0),(0,0,0,0)))] |> sum

def main =
    input |> map parse_line |> solve
